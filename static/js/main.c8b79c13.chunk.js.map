{"version":3,"sources":["BooksAPI.js","components/OptionDropdown.js","components/Book.js","components/SearchBooks.js","components/Shelf.js","components/Shelves.js","App.js","index.js"],"names":["api","token","localStorage","Math","random","toString","substr","headers","Accept","Authorization","update","book","shelf","fetch","id","method","body","JSON","stringify","then","res","json","search","query","maxResults","data","books","OptionDropdown","bookReadCategory","onChangeShelf","className","value","undefined","onChange","event","newShelf","target","disabled","Book","onUpdateLocalBook","style","width","height","backgroundImage","imageLinks","thumbnail","a","BooksAPI","updateBookDetails","updateShelf","title","author","SearchBooks","shelfBooks","updateBook","useState","searchedBooks","setSearchedBooks","setQuery","useEffect","trim","length","forEach","shelfBook","getBooks","to","type","placeholder","map","idx","findIndex","searchedBook","tempBooks","updateLocalBook","updateThisBook","Shelf","filteredBooks","filter","name","Shelves","onUpdateBook","App","allBooks","setBooks","exact","path","element","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.c8b79c13.chunk.js","sourcesContent":["const api = \"https://reactnd-books-api.udacity.com\";\n\nlet token = localStorage.token;\n\nif (!token) token = localStorage.token = Math.random().toString(36).substr(-8);\n\nconst headers = {\n  Accept: \"application/json\",\n  Authorization: token,\n};\n\nexport const get = (bookId) =>\n  fetch(`${api}/books/${bookId}`, { headers })\n    .then((res) => res.json())\n    .then((data) => data.book);\n\nexport const getAll = () =>\n  fetch(`${api}/books`, { headers })\n    .then((res) => res.json())\n    .then((data) => data.books);\n\nexport const update = (book, shelf) =>\n  fetch(`${api}/books/${book.id}`, {\n    method: \"PUT\",\n    headers: {\n      ...headers,\n      \"Content-Type\": \"application/json\",\n    },\n    body: JSON.stringify({ shelf }),\n  }).then((res) => res.json());\n\nexport const search = (query, maxResults) =>\n  fetch(`${api}/search`, {\n    method: \"POST\",\n    headers: {\n      ...headers,\n      \"Content-Type\": \"application/json\",\n    },\n    body: JSON.stringify({ query, maxResults }),\n  })\n    .then((res) => res.json())\n    .then((data) => data.books);\n","const OptionDropdown = ({ bookReadCategory, onChangeShelf }) => {\n\n    const changeShelf = (newShelf) => {\n        if (onChangeShelf) {\n            onChangeShelf(newShelf)\n        }\n\n    }\n\n    return (\n        <div className=\"book-shelf-changer\">\n            <select value={bookReadCategory === undefined ? 'none' : bookReadCategory} onChange={(event) => { changeShelf(event.target.value) }}>\n                <option value=\"move\" disabled>\n                    Move to...\n                </option>\n                <option value=\"currentlyReading\">\n                    Currently Reading\n                </option>\n                <option value=\"wantToRead\">Want to Read</option>\n                <option value=\"read\">Read</option>\n                <option value=\"none\">None</option>\n            </select>\n        </div>\n    )\n}\n\nexport default OptionDropdown;","import OptionDropdown from \"./OptionDropdown\";\nimport * as BooksAPI from '../BooksAPI';\n\nconst Book = ({ book, onUpdateLocalBook }) => {\n\n    const updateShelf = (newShelf) => {\n        const updateBookDetails = async () => {\n            await BooksAPI.update(book, newShelf);\n            onUpdateLocalBook(book, newShelf);\n        }\n\n        updateBookDetails();\n    }\n\n    return (\n        <li >\n            <div className=\"book\">\n                <div className=\"book-top\">\n                    <div\n                        className=\"book-cover\"\n                        style={{\n                            width: 128,\n                            height: 193,\n                            backgroundImage:\n                                `url(\"${book && book.imageLinks && book.imageLinks.thumbnail}\")`\n                        }}\n                    ></div>\n                    <OptionDropdown bookReadCategory={book.shelf} onChangeShelf={(newShelf) => updateShelf(newShelf)} />\n                </div>\n                <div className=\"book-title\">{book.title}</div>\n                <div className=\"book-authors\">{book.author}</div>\n            </div>\n        </li>\n    )\n}\n\nexport default Book;","import { Link } from \"react-router-dom\";\nimport { useState, useEffect } from \"react\";\nimport * as BooksAPI from '../BooksAPI';\nimport Book from \"./Book\";\n\nconst SearchBooks = ({ shelfBooks, updateBook }) => {\n\n    const [searchedBooks, setSearchedBooks] = useState([]);\n    const [query, setQuery] = useState('');\n\n    const updateThisBook = (book, newShelf) => {\n        const updateLocalBook = () => {\n            const idx = searchedBooks.findIndex((searchedBook) => {\n                return searchedBook.id === book.id;\n            })\n\n            if (idx >= 0) {\n                let tempBooks = [...searchedBooks];\n                tempBooks[idx].shelf = newShelf;\n                updateBook(book, newShelf);\n                setSearchedBooks(tempBooks);\n            }\n        }\n\n        updateLocalBook();\n    }\n\n    useEffect(() => {\n        const getBooks = async () => {\n            if (query.trim().length) {\n                const res = await BooksAPI.search(query, 100);\n                if (res.length) {\n                    res.forEach((book) => {\n                        shelfBooks.forEach((shelfBook) => {\n                            if (book.id === shelfBook.id) {\n                                book['shelf'] = shelfBook.shelf;\n                            }\n                        })\n                    });\n                    setSearchedBooks(res);\n                } else {\n                    setSearchedBooks([]);\n                }\n            } else {\n                setSearchedBooks([]);\n            }\n        }\n\n        getBooks();\n    }, [query, shelfBooks]);\n\n    return (\n        <div className=\"search-books\">\n            <div className=\"search-books-bar\">\n                <Link className=\"close-search\" to='/'>\n                    Close\n                </Link>\n                <div className=\"search-books-input-wrapper\">\n                    <input\n                        type=\"text\"\n                        placeholder=\"Search by title, author, or ISBN\"\n                        value={query}\n                        onChange={(event) => { setQuery(event.target.value) }}\n                    />\n                </div>\n            </div>\n            <div className=\"search-books-results\">\n                <ol className=\"books-grid\">\n                    {\n                        searchedBooks.map((book) => {\n                            return (\n                                <Book key={book.id} book={book} onUpdateLocalBook={(book, newShelf) => updateThisBook(book, newShelf)} />\n                            )\n                        })\n                    }\n                </ol>\n            </div>\n        </div>\n    )\n}\n\nexport default SearchBooks;","import Book from \"./Book\";\n\nconst Shelf = ({ shelf, books, updateBook }) => {\n\n    const filteredBooks = books.filter((book) => {\n        return book.shelf === shelf.value;\n    })\n\n    return (\n        <div className=\"bookshelf\" >\n            <h2 className=\"bookshelf-title\">{shelf.name}</h2>\n            <div className=\"bookshelf-books\">\n                <ol className=\"books-grid\">\n                    {\n                        filteredBooks.map((book) => {\n                            return (\n                                <Book key={book.id} book={book} onUpdateLocalBook={(book, newShelf) => updateBook(book, newShelf)} />\n                            )\n                        })\n                    }\n                </ol>\n            </div>\n        </div>\n    )\n}\n\nexport default Shelf;","import { Link } from 'react-router-dom';\nimport Shelf from './Shelf';\n\nconst Shelves = ({ books, onUpdateBook }) => {\n\n    const shelves = [{ name: 'Currently Reading', value: 'currentlyReading' }, { name: 'Want To Read', value: 'wantToRead' }, { name: 'Read', value: 'read' }];\n\n    return (\n\n        <div className=\"list-books\">\n            <div className=\"list-books-title\">\n                <h1>MyReads</h1>\n            </div>\n            <div className=\"list-books-content\">\n                <div>\n                    {\n                        shelves.map((shelf) => {\n                            return (\n                                <Shelf key={shelf.value} shelf={shelf} books={books} updateBook={(book, newShelf) => onUpdateBook(book, newShelf)} />\n                            )\n                        })\n                    }\n                </div>\n            </div>\n            <Link to='/add' className=\"open-search\">\n                Add a book\n            </Link>\n        </div>\n    )\n}\n\nexport default Shelves;","import \"./App.css\";\nimport { useState, useEffect } from 'react';\nimport { Route, Routes } from 'react-router-dom';\nimport SearchBooks from \"./components/SearchBooks\";\nimport Shelves from \"./components/Shelves\";\nimport * as BooksAPI from './BooksAPI';\n\nfunction App() {\n\n\tconst [allBooks, setBooks] = useState([]);\n\n\tuseEffect(() => {\n\t\tconst getBooks = async () => {\n\t\t\tconst res = await BooksAPI.getAll();\n\t\t\tsetBooks(res);\n\t\t}\n\n\t\tgetBooks();\n\t}, []);\n\n\tconst updateBook = (book, newShelf) => {\n\t\tconst updateLocalBook = () => {\n\t\t\tconst idx = allBooks.findIndex((shelfBook) => {\n\t\t\t\treturn shelfBook.id === book.id;\n\t\t\t})\n\n\t\t\tif (idx >= 0) {\n\t\t\t\tlet tempBooks = [...allBooks];\n\t\t\t\ttempBooks[idx].shelf = newShelf;\n\t\t\t\tsetBooks(tempBooks);\n\t\t\t}\n\t\t}\n\n\t\tupdateLocalBook();\n\t}\n\n\treturn (\n\t\t<Routes>\n\t\t\t<Route exact path=\"/\" element={\n\t\t\t\t<Shelves books={allBooks} onUpdateBook={(book, newShelf) => updateBook(book, newShelf)} />\n\t\t\t}\n\t\t\t/>\n\t\t\t<Route exact path='/add' element={\n\t\t\t\t<SearchBooks shelfBooks={allBooks} updateBook={(book, newShelf) => updateBook(book, newShelf)} />\n\t\t\t}\n\t\t\t/>\n\t\t</Routes>\n\t)\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport { BrowserRouter } from 'react-router-dom';\n\nReactDOM.render(\n  <BrowserRouter>\n    <React.StrictMode>\n      <App />\n    </React.StrictMode>\n  </BrowserRouter>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}